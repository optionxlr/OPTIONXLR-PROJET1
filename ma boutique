#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
envoyer_emails.py

Script modulable et audacieux pour envoyer des e-mails transactionnels
via l'API Brevo (Sendinblue). Id√©al pour ta boutique ElectroniShop.
"""

import os
import json
import logging
from pathlib import Path
from typing import List

from sib_api_v3_sdk import ApiClient, TransactionalEmailsApi
from sib_api_v3_sdk.models import SendSmtpEmail

# --------------------------
# CONFIGURATION & LOGGING
# --------------------------

# Configuration du logger
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)-8s | %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S"
)
logger = logging.getLogger(__name__)

# Variables d‚Äôenvironnement attendues
BREVO_API_KEY = os.getenv("BREVO_API_KEY")
if not BREVO_API_KEY:
    logger.critical("La variable d‚Äôenvironnement BREVO_API_KEY n‚Äôest pas d√©finie.")
    raise RuntimeError("Variable BREVO_API_KEY manquante")

# Chemin vers le fichier subscribers.json
BASE_DIR = Path(__file__).parent
SUBSCRIBERS_FILE = BASE_DIR / "subscribers.json"


# --------------------------
# FONCTIONS UTILES
# --------------------------

def load_subscribers(filepath: Path) -> List[str]:
    """
    Charge la liste d'adresses e-mail depuis un fichier JSON.
    Retourne une liste vide si le fichier n'existe pas.
    """
    if not filepath.exists():
        logger.warning("Aucun fichier '%s' trouv√©, liste vide.", filepath.name)
        return []
    try:
        data = json.loads(filepath.read_text(encoding="utf-8"))
        emails = [e.strip() for e in data if isinstance(e, str) and e.strip()]
        logger.info("%d abonn√©s charg√©s depuis '%s'.", len(emails), filepath.name)
        return emails
    except json.JSONDecodeError as e:
        logger.error("Erreur JSON dans '%s' : %s", filepath.name, e)
        return []


def send_email(api_instance: TransactionalEmailsApi, recipient: str) -> None:
    """
    Envoie un unique e-mail √† un destinataire donn√©.
    """
    html_content = """
    <html>
      <body>
        <h1 style="color:#2E86C1;">Salut &#128075;!</h1>
        <p>Nous avons s√©lectionn√© pour toi des gadgets √©lectroniques <strong>innovants</strong> :</p>
        <ul>
          <li>‚åö Montre connect√©e derni√®re g√©n√©ration</li>
          <li>üåÄ Mini-ventilateur USB ultra-compact</li>
          <li>‚ö° Station de recharge sans fil rapide</li>
        </ul>
        <p><a href="https://electronishop.com" style="color:#1F618D;">D√©couvre-les ici !</a></p>
        <p>√Ä bient√¥t,<br><em>L‚Äô√©quipe <strong>ElectroniShop</strong></em></p>
      </body>
    </html>
    """

    email = SendSmtpEmail(
        sender={"name": "ElectroniShop", "email": "noreply@electronishop.com"},
        to=[{"email": recipient}],
        subject="üîå Nouveaux gadgets √† ne pas manquer !",
        html_content=html_content
    )
    try:
        response = api_instance.send_transac_email(email)
        logger.info("[OK] %s ‚Üí MessageId: %s", recipient, response.message_id)
    except Exception as ex:
        logger.error("[ERREUR] %s ‚Üí %s", recipient, ex)


def send_bulk_emails(subscribers: List[str]) -> None:
    """
    Initialise le client Brevo et envoie un e-mail √† chaque abonn√©.
    """
    configuration = ApiClient.Configuration()
    configuration.api_key["api-key"] = BREVO_API_KEY

    with ApiClient(configuration) as api_client:
        api = TransactionalEmailsApi(api_client)
        for email in subscribers:
            send_email(api, email)
    logger.info("Envoi termin√© pour %d destinataires.", len(subscribers))


# --------------------------
# POINT D‚ÄôENTR√âE
# --------------------------

def main():
    logger.info("D√©marrage du script d‚Äôenvoi d‚Äôe-mails‚Ä¶")
    subscribers = load_subscribers(SUBSCRIBERS_FILE)
    if not subscribers:
        logger.warning("Aucun destinataire, sortie sans envoi.")
        return
    send_bulk_emails(subscribers)


if __name__ == "__main__":
    main()